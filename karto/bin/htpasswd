#!/usr/bin/env sh
#######################################
# script bash émulant htpasswd
# avec openssl
#
#######################################

usage()
{
echo "
utilisation :
	htpasswd -b fichier user pass
		pour ajouter/modifier un utilisateur
	htpasswd -b -v fichier user pass
		pour vérifier un utilisateur
	htpasswd -b -n user pass
		pour calculer et afficher la ligne à ajouter au fichier
	htpasswd -i fichier user
		pour ajouter/modifier un utilisateur, en lisant le mot de passe sur l'entrée standard
	htpasswd -i -v fichier user
		pour vérifier un utilisateur, en lisant le mot de passe sur l'entrée standard
"
return 1
}

TEMP=$(getopt -o 'binvh' -- "$@")
eval set -- "$TEMP"
unset TEMP

while true
do
  case "$1" in
    '-b')
      optb=1
      shift
      continue
      ;;
    '-i')
      opti=1
      shift
      continue
      ;;
    '-n')
      optn=1
      shift
      continue
      ;;
    '-v')
      optv=1
      shift
      continue
      ;;
    '-h')
      usage
      return 1
      ;;
    '--')
      shift
      break
      ;;
  esac
done


if [ $optn ]
then
  passwdfile="&1"
else
  passwdfile="$1"
  shift
fi
username="$1"
shift

if [ $optb ]
then
  password=$1
  shift
fi
if [ $opti ]
then
  read password
fi


if [ -z "$username" ]; then
	while [ -z "${username}" ]; do
		read -p 'Usersname: ' username
	done
fi

if [ $optv ]
then
  P1=`grep "^${username}:" "$passwdfile"|sed "s/^${username}://"`
  SALT=`echo "$P1"|sed 's/^\$apr1\\$//;s/\$.*//'`
  P2=`openssl passwd -apr1 -salt "$SALT" $password`
  if [ x"$P1" = x"$P2" ]
  then
    echo OK
    return 0
  else
    echo Bad Password
    return 1
  fi
fi
	
if [ $optn ]
then
  echo "${username}:"`openssl passwd -apr1 "$password"`
  return 0
else
  grep -v "^${username}:" "$passwdfile" >> /tmp/htpasswd.$$
  mv /tmp/htpasswd.$$ "$passwdfile"
  printf "${username}:`openssl passwd -apr1 $password`\n" >>"$passwdfile"
  return 0
fi
